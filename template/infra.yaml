Description: Template to deploy S3 buckets for logs
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      # - 
      #   Label: 
      #     default: "Network Configuration"
      #   Parameters: 
      #     - VpcCIDR
      - 
        Label: 
          default: "ECS cluster Configuration"
        Parameters: 
          - ProjectName
      - 
        Label:
          default: "Tagging Configuration"
        Parameters:
          - EnvironmentName
Parameters:
  # VpcCIDR:
  #   Description: "IPv4 address range of the VPC in CIDR notation."
  #   Type: String
  #   Default: 10.192.0.0/16
  ProjectName:
    Type: String 
    Description: Name for Aurora Cluster DB and EFS. Also used for S3 log bucket naming. 
    Default: drupal
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: Test
  LogBucketName:
    Description: Name for Logs Bucket
    Type: String

Mappings:
  RegionMap:
    us-east-1:
      "elbAcc" : "127311923021"
    us-east-2:
      "elbAcc" : "033677994240"
    us-west-1:
      "elbAcc" : "027434742980"
    us-west-2:
      "elbAcc" : "797873946194"
    af-south-1:
      "elbAcc" : "098369216593"
    ca-central-1:
      "elbAcc" : "985666609251"
    eu-central-1:
      "elbAcc" : "054676820928"
    eu-west-1:
      "elbAcc" : "156460612806"
    eu-west-2:
      "elbAcc" : "652711504416"
    eu-south-1:
      "elbAcc" : "635631232127"
    eu-west-3:
      "elbAcc" : "009996457667"
    eu-north-1:
      "elbAcc" : "897822967062"
    ap-east-1:
      "elbAcc" : "754344448648"
    ap-northeast-1:
      "elbAcc" : "582318560864"
    ap-northeast-2:
      "elbAcc" : "600734575887"
    ap-northeast-3:
      "elbAcc" : "383597477331"
    ap-southeast-1:
      "elbAcc" : "114774131450"
    ap-southeast-2:
      "elbAcc" : "783225319266"
    ap-south-1:
      "elbAcc" : "718504428378"
    me-south-1:
      "elbAcc" : "076674570225"
    sa-east-1:
      "elbAcc" : "507241528517"
    us-gov-west-1:
      "elbAcc" : "048591011584"
    us-gov-east-1:
      "elbAcc" : "190560391635"
    eu-south-2:
      "elbAcc" : "000000000000"

Conditions:
  IsLegacyRegion: !Not [!Equals [!FindInMap [RegionMap, !Ref "AWS::Region", "elbAcc"], ""]]

  
Resources:


  LogBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref LogBucketName
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
           - Value: environment
             Key: !Ref EnvironmentName
  
  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              !If 
                - IsLegacyRegion
                - AWS: 
                    Fn::Sub:
                      - "arn:${AWS::Partition}:iam::${ELBAccount}:root"
                      - ELBAccount: !FindInMap [RegionMap, !Ref "AWS::Region", elbAcc]
                - Service: 
                    - "logdelivery.elasticloadbalancing.amazonaws.com"
            Action: s3:PutObject
            Resource: !Sub "${LogBucket.Arn}/*"
 
# =========================== IAM Resources ============================
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Join ['-',[!Ref ProjectName, TaskRole,!Ref AWS::Region]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: 
                 - elasticfilesystem:ClientMount
                 - elasticfilesystem:ClientRootAccess                 
                 - elasticfilesystem:ClientWrite
                Resource: '*'
                Condition:
                  StringEquals:
                    'aws:TagKeys/Name': !Ref ProjectName
              ## Required for ECS Exec
              - Effect: Allow
                Action: 
                 - ssmmessages:CreateControlChannel
                 - ssmmessages:CreateDataChannel
                 - ssmmessages:OpenControlChannel
                 - ssmmessages:OpenDataChannel
                Resource: '*'
            
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      #RoleName: !Join ['', [!Ref ProjectName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref ProjectName, ECSExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                  - elasticfilesystem:DescribeMountTargets
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role


# ============================== Outputs ===========================
Outputs:
  LogBucketName:
    Description: Name of the Logs bucket
    Value: !Ref LogBucket
    Export:
      Name: !Sub "${AWS::StackName}-LogBucketName"
  ## Export VPC Id
  # VPCId:
  #   Description: VPC for cluster
  #   Value: !Ref VPC
  #   Export:
  #     Name: !Sub "${AWS::StackName}-VPC"

  # ## Export VPC CIDR
  # VPCCIDR:
  #   Description: VPC CIDR
  #   Value: !Ref VpcCIDR
  #   Export:
  #     Name: !Sub "${AWS::StackName}-VPCCIDR"

  # ## Export public subnet2
  # PublicSubnet1:
  #   Description: Public subnet 1 in AZ 1
  #   Value: !Ref PublicSubnet1
  #   Export:
  #     Name: !Sub "${AWS::StackName}-PublicSubnet1"
  # PublicSubnet2:
  #   Description: Public subnet 2 in AZ 2
  #   Value: !Ref PublicSubnet2
  #   Export:
  #     Name: !Sub "${AWS::StackName}-PublicSubnet2"  
  # # PublicSubnet3:
  # #   Description: Public subnet 3 in AZ 3
  # #   Value: !Ref PublicSubnet3
  # #   Export:
  # #     Name: !Sub "${AWS::StackName}-PublicSubnet3"

  # ## Export private subnets
  # PrivateSubnet1:
  #   Description: Private subnet 1 in AZ 1
  #   Value: !Ref PrivateSubnet1
  #   Export:
  #     Name: !Sub "${AWS::StackName}-PrivateSubnet1"
  # PrivateSubnet2:
  #   Description: Private subnet 2 in AZ 2
  #   Value: !Ref PrivateSubnet2
  #   Export:
  #     Name: !Sub "${AWS::StackName}-PrivateSubnet2"
  # # PrivateSubnet3:
  # #   Description: Private subnet 3 in AZ 3
  # #   Value: !Ref PrivateSubnet3
  # #   Export:
  # #     Name: !Sub "${AWS::StackName}-PrivateSubnet3"

 ## IAM Exports
  ECSTaskRole:
    Description: Default ECS Task Role
    Value: !Ref ECSTaskRole
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskRole"
  ECSTaskRoleArn:
    Description: Default ECS Task Role
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSTaskRoleArn"

  AutoScalingRole:
    Description: AutoScaling Role for ECS
    Value: !Ref AutoScalingRole
    Export:
      Name: !Sub "${AWS::StackName}-AutoScalingRole"
  AutoScalingRoleArn:
    Description: Arn of AutoScaling Role for ECS
    Value: !GetAtt AutoScalingRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-AutoScalingRoleArn"

  ECSExecutionRole:
    Description: Default ECS Execution Role
    Value: !Ref ECSExecutionRole
    Export:
      Name: !Sub "${AWS::StackName}-ECSExecutionRole"
  ECSExecutionRoleArn:
    Description: Default ECS Execution Role
    Value: !GetAtt ECSExecutionRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ECSExecutionRoleArn"

  EC2Role:
    Description: Role for EC2 Aux Instance
    Value: !Ref EC2Role
    Export:
      Name: !Sub "${AWS::StackName}-EC2Role"
  EC2RoleArn:
    Description: Arn of Role for EC2 Aux Instance
    Value: !GetAtt EC2Role.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EC2RoleArn"
  EC2InstanceProfile:
    Description: Instance Profile
    Value: !Ref EC2InstanceProfile
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstanceProfile"